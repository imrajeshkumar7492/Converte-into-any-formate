name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  pages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # -------------------------------
  # Security and Code Quality Checks
  # -------------------------------
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install frontend dependencies
        run: cd frontend && yarn install --frozen-lockfile
      - name: Install backend dependencies
        run: cd backend && pip install -r requirements.txt
      - name: Run ESLint (Frontend)
        run: cd frontend && npx eslint src/ --ext .js,.jsx --max-warnings 0 || true
      - name: Run Bandit Security Scan (Backend)
        run: pip install bandit && bandit -r backend/ -f json -o bandit-report.json || true
      - name: Run Safety Check (Backend Dependencies)
        run: pip install safety && safety check --json --output safety-report.json || true
      - name: Run npm audit (Frontend)
        run: cd frontend && npm audit --audit-level=high --json > npm-audit.json || true
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            frontend/npm-audit.json

  # -------------------------------
  # Test Suite
  # -------------------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security-scan
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install FFmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg
      - name: Install backend dependencies
        run: cd backend && pip install -r requirements.txt && pip install pytest pytest-asyncio httpx
      - name: Install frontend dependencies
        run: cd frontend && yarn install --frozen-lockfile
      - name: Run backend tests
        env:
          MONGO_URL: mongodb://localhost:27017/test_fileconverter
        run: cd backend && python -m pytest tests/ -v || true
      - name: Run frontend tests
        run: cd frontend && CI=true yarn test --coverage --watchAll=false || true
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            backend/pytest-report.xml
            frontend/coverage/

  # -------------------------------
  # Build Docker Images
  # -------------------------------
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Clear Docker build cache (if needed)
        run: docker buildx prune -f --filter until=24h || true
      - name: Log in to Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
          flavor: latest=auto
      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
          flavor: latest=auto
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          build-args: BUILDKIT_INLINE_CACHE=1
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          build-args: BUILDKIT_INLINE_CACHE=1

  # -------------------------------
  # Deploy to Staging
  # -------------------------------
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-converter.imrajeshkumar7492.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to Railway (Staging)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: "10b65955-d74c-46a7-930a-05a590867ac9"
          RAILWAY_ENVIRONMENT: "staging"
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "❌ Missing RAILWAY_TOKEN"
            exit 1
          fi
          npm install -g @railway/cli
          railway --version
          railway login --token "$RAILWAY_TOKEN"
          echo "Deploying backend to staging..."
          cd backend
          export RAILWAY_PROJECT_ID="10b65955-d74c-46a7-930a-05a590867ac9"
          export RAILWAY_ENVIRONMENT="staging"
          railway up --detach
          cd ..
          echo "Deploying frontend to staging..."
          cd frontend
          export RAILWAY_PROJECT_ID="10b65955-d74c-46a7-930a-05a590867ac9"
          export RAILWAY_ENVIRONMENT="staging"
          railway up --detach
          cd ..
      - name: Run staging smoke tests
        run: |
          sleep 60
          curl -f https://staging-api-converter.imrajeshkumar7492.dev/api/health
          curl -f https://staging-converter.imrajeshkumar7492.dev

  # -------------------------------
  # Deploy to Production
  # -------------------------------
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://converter.imrajeshkumar7492.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to Railway (Production)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: "10b65955-d74c-46a7-930a-05a590867ac9"
          RAILWAY_ENVIRONMENT: "production"
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "❌ Missing RAILWAY_TOKEN"
            exit 1
          fi
          npm install -g @railway/cli
          railway --version
          railway login --token "$RAILWAY_TOKEN"
          echo "Deploying backend to production..."
          cd backend
          export RAILWAY_PROJECT_ID="10b65955-d74c-46a7-930a-05a590867ac9"
          export RAILWAY_ENVIRONMENT="production"
          railway up --detach
          cd ..
          echo "Deploying frontend to production..."
          cd frontend
          export RAILWAY_PROJECT_ID="10b65955-d74c-46a7-930a-05a590867ac9"
          export RAILWAY_ENVIRONMENT="production"
          railway up --detach
          cd ..
      - name: Run production smoke tests
        run: |
          sleep 60
          curl -f https://api-converter.imrajeshkumar7492.dev/api/health
          curl -f https://converter.imrajeshkumar7492.dev

  # -------------------------------
  # Deploy to GitHub Pages
  # -------------------------------
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      - name: Install dependencies
        run: cd frontend && yarn install --frozen-lockfile
      - name: Build for GitHub Pages
        run: cd frontend && yarn build
        env:
          CI: false
          REACT_APP_BACKEND_URL: https://api-converter.imrajeshkumar7492.dev
          PUBLIC_URL: /Converte-into-any-formate
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/build
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
