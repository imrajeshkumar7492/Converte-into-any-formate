name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install frontend dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run ESLint (Frontend)
        run: |
          cd frontend
          yarn add -D eslint @eslint/js
          npx eslint src/ --ext .js,.jsx --max-warnings 0 || true

      - name: Run Bandit Security Scan (Backend)
        run: |
          pip install bandit
          bandit -r backend/ -f json -o bandit-report.json || true

      - name: Run Safety Check (Backend Dependencies)
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Run npm audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=high --json > npm-audit.json || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            frontend/npm-audit.json

  # Test Suite
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security-scan
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Install frontend dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile

      - name: Run backend tests
        env:
          MONGO_URL: mongodb://localhost:27017/test_fileconverter
        run: |
          cd backend
          python -m pytest tests/ -v || true

      - name: Run frontend tests
        run: |
          cd frontend
          CI=true yarn test --coverage --watchAll=false || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            backend/pytest-report.xml
            frontend/coverage/

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Clear Docker build cache (if needed)
        run: |
          docker buildx prune -f --filter until=24h || true

      - name: Log in to Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build info
        run: |
          echo "Building Docker images..."
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "‚úÖ Will PUSH images to registry (main branch)"
          else
            echo "üî® Will only BUILD images (PR or non-main branch)"
          fi

      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
          flavor: |
            latest=auto

      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
          flavor: |
            latest=auto

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64  
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Deploy to Railway (shared step)
  deploy-template:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        env: [staging, production]
    if: >
      (matrix.env == 'staging' && github.ref == 'refs/heads/develop') ||
      (matrix.env == 'production' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Verify Railway Token
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "‚ùå Missing Railway project token"
            exit 1
          fi
          railway whoami || true
          railway status || true
          railway service list || true

      - name: Deploy Backend & Frontend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "üöÄ Deploying to Railway: ${{ matrix.env }}"

          BACKEND_ID=$(railway service list --json | jq -r '.services[] | select(.name | test("backend"; "i")) | .id')
          FRONTEND_ID=$(railway service list --json | jq -r '.services[] | select(.name | test("frontend"; "i")) | .id')

          if [ -z "$BACKEND_ID" ] || [ -z "$FRONTEND_ID" ]; then
            echo "‚ùå Could not find backend/frontend service IDs"
            railway service list
            exit 1
          fi

          echo "Deploying backend ($BACKEND_ID)..."
          cd backend
          railway up --service $BACKEND_ID --environment ${{ matrix.env }}
          cd ..

          echo "Deploying frontend ($FRONTEND_ID)..."
          cd frontend
          railway up --service $FRONTEND_ID --environment ${{ matrix.env }}
          cd ..

          echo "‚úÖ Railway deployment completed for ${{ matrix.env }}"
