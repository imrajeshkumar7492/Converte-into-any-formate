version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: converte-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: converte_pro
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - converte-network

  # Redis for Queue System
  redis:
    image: redis:7.2-alpine
    container_name: converte-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - converte-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: converte-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGO_URL=mongodb://admin:password123@mongodb:27017/converte_pro?authSource=admin
      - DB_NAME=converte_pro
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/processed:/app/processed
      - ./backend/temp:/app/temp
      - ./backend/logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - converte-network

  # Worker for Background Processing
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: converte-worker
    restart: unless-stopped
    command: ["python", "-m", "celery", "worker", "-A", "server.celery", "--loglevel=info"]
    environment:
      - MONGO_URL=mongodb://admin:password123@mongodb:27017/converte_pro?authSource=admin
      - DB_NAME=converte_pro
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/processed:/app/processed
      - ./backend/temp:/app/temp
      - ./backend/logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - converte-network

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: converte-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - converte-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: converte-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - converte-network
    profiles:
      - production

volumes:
  mongodb_data:
  redis_data:

networks:
  converte-network:
    driver: bridge